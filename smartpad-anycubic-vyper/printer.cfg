######### NOT REMOVE START ##################################
[include plr.cfg]
[include mainsail.cfg]
[include timelapse.cfg]
[include smartpad-adxl345.cfg]
[include smartpad-cpu-temp.cfg]
[include moonraker_obico_macros.cfg]
[exclude_object]
[save_variables]
filename: ~/printer_data/config/variables.cfg
[gcode_arcs]
resolution: 0.1

[respond]
default_type: echo
default_prefix: echo:
[display_status]
[pause_resume]

######### NOT REMOVE END ##################################

#YUMI SMART PAD use OPEN SOURCE CODE 
#all documentation about klipper is available here : https://www.klipper3d.org/
#all documentation about Moonraker is available here : https://moonraker.readthedocs.io/
#all documentation about KlipperScreen is avaialble here : https://klipperscreen.readthedocs.io/
#all documentation about Mainsail is available here : https://docs.mainsail.xyz/
#all documentation about Crowsnest is available here : https://crowsnest.mainsail.xyz/
#all documentation about YUMI-LAB is available here : https://wiki.yumi-lab.com/

#Anycubic Vyper 

# See docs/Config_Reference.md for a description of parameters.

######################################################
##################   Anycubic Vyper   ################
######################################################
[mcu]
serial: /dev/ttyUSB0
restart_method: command

######################################################
###############       Stockage PI       ##############
######################################################
[virtual_sdcard]
path: ~/printer_data/gcodes

[stepper_x]
step_pin: PC2
dir_pin: PB9
enable_pin: !PC3
microsteps: 16
rotation_distance: 40
endstop_pin: !PA7
position_min: -3
position_endstop: -3
position_max: 245
homing_speed: 30.0

[stepper_y]
step_pin: PB8
dir_pin: PB7
enable_pin: !PC13
microsteps: 16
rotation_distance: 32
endstop_pin: !PC5
position_min: -17
position_endstop: -17
position_max: 245
homing_speed: 30.0

[stepper_z]
step_pin: PB6
dir_pin: !PB5
enable_pin: !PC14
microsteps: 16
rotation_distance: 8
endstop_pin: PB2
position_endstop: 0.0
position_max: 260
position_min: -3
homing_speed: 5.0

[stepper_z1]
step_pin: PC0
dir_pin: !PC1
enable_pin: !PC15
microsteps: 16
rotation_distance: 8
#endstop_pin: PC6

[extruder]
step_pin: PB4
dir_pin: !PB3
enable_pin: !PA15
microsteps: 16
rotation_distance: 7.6555
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: PA1
sensor_type: ATC Semitec 104GT-2
sensor_pin: PC4
max_extrude_cross_section: 5
control: pid
pid_kp = 28.937
pid_ki = 1.295
pid_kd = 161.688
min_temp: 0
max_temp: 260
pressure_advance = 0.60000

[heater_fan extruder_fan]
pin: PB1

[heater_bed]
heater_pin: PA4
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PB0
control: pid
pid_kp = 67.648
pid_ki = 1.044
pid_kd = 1095.893
min_temp: 0
max_temp: 110

[fan]
pin: PA0

[probe]
pin: !PB12
z_offset: 0
activate_gcode:
    probe_reset

[output_pin LED]
pin: mcu:PA13
pwm: False
value: 0

[output_pin probe_reset_pin]
pin: PB13

[bed_mesh]
mesh_min: 15,15
mesh_max: 230, 230
probe_count: 5,5
algorithm: bicubic
speed: 40

[filament_switch_sensor runout]
pause_on_runout: True
switch_pin: PA5

[temperature_sensor Raspberry Pi]
sensor_type: temperature_host
min_temp: 0
max_temp: 100

[safe_z_home]
home_xy_position: -3,-17
z_hop: 10

[printer]
kinematics: cartesian
max_velocity: 300
max_accel: 3000
max_accel_to_decel: 3000
max_z_velocity: 5
max_z_accel: 100

[gcode_macro probe_reset]
gcode:
    SET_PIN PIN=probe_reset_pin VALUE=0
    G4 P300
    SET_PIN PIN=probe_reset_pin VALUE=1
    G4 P100

#####################################################################
#MACRO
#####################################################################


[gcode_macro PRINT_START]  
gcode:
    RESPOND MSG="STARTING TO PRINT"
    save_last_file
    SAVE_VARIABLE VARIABLE=was_interrupted VALUE=True
    G92 E0
    BED_MESH_CLEAR                                           
	  G90             
    BED_MESH_PROFILE LOAD=default   
    CLEAR_PAUSE
    G28          

[gcode_macro PRINT_END]
gcode:    
  SAVE_VARIABLE VARIABLE=was_interrupted VALUE=False
  clear_last_file
  RUN_SHELL_COMMAND CMD=clear_plr
  G1 X0 Y0
  M104 S0 ; Turn off extruder
  M140 S0 ; Turn off heated bed
  M106 S0 ; Turn off extruder fan
  M107 ; Turn off chamber fan
  M84 ; Disable motors



[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 2.0) %}
      {% set z_safe = 2.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  PAUSE_BASE
  G91
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G1 E-{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %} 

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G91
    G1 E{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}  
  RESUME_BASE {get_params}

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  SAVE_VARIABLE VARIABLE=was_interrupted VALUE=False
  RUN_SHELL_COMMAND CMD=clear_plr
  clear_last_file
  PRINT_END
  SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} 
  #SDCARD_RESET_FILE
  M400              ; wait for buffer to clear
  G92 E0            ; zero the extruder
  G1 E-10.0 F1200 	; retract filament
  M106 S0
  TURN_OFF_HEATERS
  CANCEL_PRINT_BASE
  G91 
  M107 	            ; turn off fan
  G1 Z2 F3000 
  G90
  G0 X0 Y230 F6000
  M84

[gcode_macro G29]
gcode:
      BED_MESH_CLEAR
      G28
      BED_MESH_CALIBRATE
      G0 X117 Y126 Z5 F3000
      G0 Z0 F300

[gcode_macro PID_EXTRUDER]
gcode:
  G28
  M106 S255
  PID_CALIBRATE HEATER=extruder TARGET=190
  SAVE_CONFIG

[gcode_macro PID_BED]
gcode:
  G28
  M106 S255
  PID_CALIBRATE HEATER=heater_bed TARGET=60
  SAVE_CONFIG

[gcode_macro M109]
rename_existing: M99109
gcode:
    #Parameters
    {% set s = params.S|float %}
    M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}   
    {% endif %}

[gcode_macro M84]
rename_existing:M84.1
gcode:
      SET_STEPPER_ENABLE STEPPER=stepper_x enable=0
      SET_STEPPER_ENABLE STEPPER=stepper_y enable=0
      SET_STEPPER_ENABLE STEPPER=stepper_z enable=0
      SET_STEPPER_ENABLE STEPPER=extruder  enable=0
      SET_KINEMATIC_POSITION

[gcode_macro M205]
description: Sets square corner velocity.
  Usage: M205 [X<velocity>] [Y<velocity>]
gcode:
  {% if 'X' in params or 'Y' in params %}
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY="{
      (params.X|default(0)|float, params.Y|default(0)|float)|min}"
  {% else %}
    SET_VELOCITY_LIMIT
  {% endif %}

[gcode_macro M204]
description: Sets maximum accelleration.
  Usage: M204 [S<accel>] [P<accel> T<accel>]
rename_existing: M204.1
gcode:
  {% set f = params.F|default(0.5)|float %}
  {% if 'S' in params %}
  {% set s = params.S|float %}
  SET_VELOCITY_LIMIT ACCEL={s} ACCEL_TO_DECEL={ s * f }
  {% else %}
  {% if 'P' in params %}
  {% set p = params.P|float %}
  {% if 'T' in params %}
  {% set t = params.T|float %}
  {% if p < t %}
  SET_VELOCITY_LIMIT ACCEL={p} ACCEL_TO_DECEL={ p * f }
  {% else %}
  SET_VELOCITY_LIMIT ACCEL={t} ACCEL_TO_DECEL={ t * f }
  {% endif %}
  {% else %}
  SET_VELOCITY_LIMIT ACCEL={p} ACCEL_TO_DECEL={ p * f }
  {% endif %}
  {% elif 'T' in params %}
  {% set t = params.T|float %}
  SET_VELOCITY_LIMIT ACCEL={t} ACCEL_TO_DECEL={ t * f }
  {% endif %}
  {% endif %}
  
[gcode_macro M203]
description: Sets maximum velocity.
  Usage: M203 [X<velocity>] [Y<velocity>]
gcode:
  {% if 'X' in params or 'Y' in params %}
    {% set velocity = (params.X|default(params.Y)|float,
                       params.Y|default(params.X)|float)|min %}
    SET_VELOCITY_LIMIT VELOCITY="{velocity}"
  {% else %}
    SET_VELOCITY_LIMIT
  {% endif %}

[gcode_macro M201]
description: Sets maximum accelleration.
  Usage: M201 [X<accel>] [Y<accel>]
gcode:
  {% if 'X' in params or 'Y' in params %}
  {% set accel = (params.X|default(params.Y)|float, params.Y|default(params.X)|float)|min %}
  SET_VELOCITY_LIMIT ACCEL={accel} ACCEL_TO_DECEL={accel * 0.5}
  {% else %}
  SET_VELOCITY_LIMIT
  {% endif %}
  
[gcode_macro M191]
gcode:
      {% set s = params.S|float %}
      {% if params.S is defined %}
        SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={params.S|int}
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s-4} MAXIMUM={s+10} 
      {% endif %}


[gcode_macro M300]
gcode:


[gcode_macro M600]
gcode:
  PAUSE 

[gcode_macro M601]
gcode:
    CHANGE_FILAMENT

[gcode_macro M900]
gcode:
  {% if 'K' in params %}
    {% if 'E' in params %}
      SET_PRESSURE_ADVANCE EXTRUDER={params.E} ADVANCE={params.K}
    {% else %}
      SET_PRESSURE_ADVANCE ADVANCE={params.K}
    {% endif %}
  {% endif %}

[gcode_macro SAUVEGARDER]
description: Sauvegarder la configuration
gcode:
  SAVE_CONFIG

[gcode_macro UNLOAD_FILAMENT]
gcode:
  SAVE_GCODE_STATE NAME=unload_state
  G91
  {% if params.TEMP is defined or printer.extruder.can_extrude|lower == 'false' %}
    M117 Heating...
    # Heat up hotend to provided temp or 220 as default as that should work OK with most filaments.
    M109 S{params.TEMP|default(220, true)}
  {% endif %}
  M117 Unloading filament...
  G92 E0.0
  G91
  G1 E-45 F5000
  G1 E-15 F1000
  G1 E-20 F1000
  G90
  G92 E0.0
  M400
  M117 Remove Filament Now!
  M300 S300 P1000
  M117 Filament unloaded!
  RESTORE_GCODE_STATE NAME=unload_state

[gcode_macro LOAD_FILAMENT]
gcode:
  SAVE_GCODE_STATE NAME=load_state
  G91
  # Heat up hotend to provided temp or 220 as default as that should work OK with most filaments.
  {% if params.TEMP is defined or printer.extruder.can_extrude|lower == 'false' %}
  M117 Heating...
  M109 S{params.TEMP|default(220, true)}
  {% endif %}
  M117 Loading filament...
  # Load the filament into the hotend area.
  G92 E0.0
  G91
  G1 E70 F400
  G1 E40 F100
  G90
  G92 E0.0
  M400
  M117 Filament loaded!
  RESTORE_GCODE_STATE NAME=load_state

[gcode_macro _KAMP_Settings]
description: This macro contains all adjustable settings for KAMP 

# The following variables are settings for KAMP as a whole.
variable_verbose_enable: True               # Set to True to enable KAMP information output when running. This is useful for debugging.

# The following variables are for adjusting adaptive mesh settings for KAMP.
variable_mesh_margin: 0                     # Expands the mesh size in millimeters if desired. Leave at 0 to disable.
variable_fuzz_amount: 0                     # Slightly randomizes mesh points to spread out wear from nozzle-based probes. Leave at 0 to disable.

# The following variables are for those with a dockable probe like Klicky, Euclid, etc.                 # ----------------  Attach Macro | Detach Macro
variable_probe_dock_enable: False           # Set to True to enable the usage of a dockable probe.      # ---------------------------------------------
variable_attach_macro: 'Attach_Probe'       # The macro that is used to attach the probe.               # Klicky Probe:   'Attach_Probe' | 'Dock_Probe'
variable_detach_macro: 'Dock_Probe'         # The macro that is used to store the probe.                # Euclid Probe:   'Deploy_Probe' | 'Stow_Probe'
                                                                                                        # Legacy Gcode:   'M401'         | 'M402'

# The following variables are for adjusting adaptive purge settings for KAMP.
variable_purge_height: 0.8                  # Z position of nozzle during purge, default is 0.8.
variable_tip_distance: 0                    # Distance between tip of filament and nozzle before purge. Should be similar to PRINT_END final retract amount.
variable_purge_margin: 10                   # Distance the purge will be in front of the print area, default is 10.
variable_purge_amount: 30                   # Amount of filament to be purged prior to printing.
variable_flow_rate: 12                      # Flow rate of purge in mm3/s. Default is 12.

# The following variables are for adjusting the Smart Park feature for KAMP, which will park the printhead near the print area at a specified height.
variable_smart_park_height: 10              # Z position for Smart Park, default is 10.

gcode: # Gcode section left intentionally blank. Do not disturb.

    {action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}

[gcode_macro BED_MESH_CALIBRATE]
rename_existing: _BED_MESH_CALIBRATE
gcode:

    {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}                                # Gather all object points
    {% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}                                                          # Get bed mesh min from printer.cfg
    {% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}                                                          # Get bed mesh max from printer.cfg
    {% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}                                                        # Get probe count from printer.cfg
    {% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}                                                                 # Pull variables from _KAMP_Settings
    {% set verbose_enable = kamp_settings.verbose_enable | abs %}                                                                   # Pull verbose setting from _KAMP_Settings
    {% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}                                                             # Pull probe dockable probe settings from _KAMP_Settings
    {% set attach_macro = kamp_settings.attach_macro | string %}                                                                    # Pull attach probe command from _KAMP_Settings
    {% set detach_macro = kamp_settings.detach_macro | string %}                                                                    # Pull detach probe command from _KAMP_Settings
    {% set mesh_margin = kamp_settings.mesh_margin | float %}                                                                       # Pull mesh margin setting from _KAMP_Settings
    {% set fuzz_amount = kamp_settings.fuzz_amount | float %}                                                                       # Pull fuzz amount setting from _KAMP_Settings
    {% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}                                             # If probe count is only a single number, convert it to 2. E.g. probe_count:7 = 7,7
    {% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}                            # Determine max probe point distance
    {% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}                            # Determine max probe point distance
    {% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}                                                # Set x_min from smallest object x point
    {% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}                                                # Set y_min from smallest object y point
    {% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}                                                # Set x_max from largest object x point
    {% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}                                                # Set y_max from largest object y point

    {% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}                                                          # Set fuzz_range between 0 and fuzz_amount
    {% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}                                                   # Adapt x_min to margin and fuzz constraints
    {% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}                                                   # Adapt y_min to margin and fuzz constraints
    {% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}                                                   # Adapt x_max to margin and fuzz constraints
    {% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}                                                   # Adapt y_max to margin and fuzz constraints

    {% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}                                                               # Compare adjustments to defaults and choose max
    {% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}                                                               # Compare adjustments to defaults and choose max
    {% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}                                                               # Compare adjustments to defaults and choose min
    {% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}                                                               # Compare adjustments to defaults and choose min

    {% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method='ceil') | int) + 1 %}          # Define probe_count's x point count and round up
    {% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method='ceil') | int) + 1 %}          # Define probe_count's y point count and round up

    {% if (([points_x, points_y]|max) > 6) %}                                                                                       # 
        {% set algorithm = "bicubic" %}                                                                                             # 
        {% set min_points = 4 %}                                                                                                    # 
    {% else %}                                                                                                                      # Calculate if algorithm should be bicubic or lagrange
        {% set algorithm = "lagrange" %}                                                                                            # 
        {% set min_points = 3 %}                                                                                                    # 
    {% endif %}                                                                                                                     # 

    {% set points_x = [points_x , min_points]|max %}                                                                                # Set probe_count's x points to fit the calculated algorithm
    {% set points_y = [points_y , min_points]|max %}                                                                                # Set probe_count's y points to fit the calculated algorithm
    {% set points_x = [points_x , probe_count[0]]|min %}
    {% set points_y = [points_y , probe_count[1]]|min %}

    {% if verbose_enable == True %}                                                                                                 # If verbose is enabled, print information about KAMP's calculations
        {% if printer.exclude_object.objects != [] %}

            { action_respond_info( "Algorithm: {}.".format(                                                                              
                (algorithm),                                                                                                            
            )) }

            { action_respond_info("Default probe count: {},{}.".format(                                                                  
                (probe_count[0]),                                                                                                       
                (probe_count[1]),                                                                                                       
            )) }

            { action_respond_info("Adapted probe count: {},{}.".format(                                                                  
                (points_x),                                                                                                             
                (points_y),                                                                                                             
            )) }                                                                                                              

            {action_respond_info("Default mesh bounds: {}, {}.".format(                                                                  
                (bed_mesh_min[0],bed_mesh_min[1]),                                                                                      
                (bed_mesh_max[0],bed_mesh_max[1]),                                                                                      
            )) }

            {% if mesh_margin > 0 %}                                                                                                    
                {action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(                                       
                    (mesh_margin),                                                                                                      
                    (mesh_margin),                                                                                       
                )) }                                                                                                                    
            {% else %}                                                                                                                  
                {action_respond_info("Mesh margin is 0, margin not increased.")}                                                        
            {% endif %}                                                                                                                 

            {% if fuzz_amount > 0 %}                                                                                                    
                {action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(                                     
                    (fuzz_amount),                                                                                                      
                )) }                                                                                                                    
            {% else %}                                                                                                                  
                {action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}                                                      
            {% endif %}                                                                                                                 

            { action_respond_info("Adapted mesh bounds: {}, {}.".format(                                                                 
                (adapted_x_min, adapted_y_min),                                                                                         
                (adapted_x_max, adapted_y_max),                                                                                         
            )) }

            {action_respond_info("KAMP adjustments successful. Happy KAMPing!")}

        {% else %}

            {action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}
            G4 P5000                                                                                                                # Wait 5 seconds to make error more visible
        {% endif %}

    {% endif %}

    {% if probe_dock_enable == True %}
        {attach_macro}                                                                                                              # Attach/deploy a probe if the probe is stored somewhere outside of the print area
    {% endif %}

    _BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}

    {% if probe_dock_enable == True %}
        {detach_macro}                                                                                                              # Detach/stow a probe if the probe is stored somewhere outside of the print area
    {% endif %}            

    
##################################################
# Verifications and Measurements with ADXL
##################################################

[gcode_macro ADXL_TEST]
description: ADXL Test
gcode:
  ACCELEROMETER_QUERY


[gcode_macro ADXL_NOISE]
description: Measure Accelerometer Noise
gcode:
  MEASURE_AXES_NOISE


[gcode_macro ADXL_AXE_X]
description: Measure X axis resonances
gcode:
  G28
  M400
  SHAPER_CALIBRATE AXIS=X


[gcode_macro ADXL_AXE_Y]
description: Measure Y axis resonances
gcode:
  G28
  M400
  SHAPER_CALIBRATE AXIS=Y

[gcode_macro SECURITY_OFFSET]
description: Apply a 2mm Safety Offset
gcode:
  SET_GCODE_OFFSET Z=+2
  RESPOND MSG="Safety Offset applied!"
