##INFO 
Unfortunately due to the way jinja is processed, you can’t QUERY_PROBE and then check its state in the same macro,
the printer.probe.last_query reads the value at the start of the macro, before your QUERY_PROBE command is executed.
This is because all the jinja expressions are evaluated at the start of the macro, regardless of what gcode might be ahead of them in the actual macro code.
Sometimes you can get around this by using a second macro. Try something like this:

Loop interval
It is possible to implement custom control loops. It's possible to do them in the C micro-controller code (see src/endstop.c as an example). 
hen implemented in the micro-controller the round-trip-time is generally measurable in micro-seconds. 
It's also possible to implement them in the host python code (see klippy/extras/heaters.py as an example). 
When implemented in the host code, we generally use a round-trip time of 100ms or greater. As indicated earlier, 
it's also possible to implement a control loop in g-code macros using the [delayed_gcode] system.

-Kevin
########################## https://www.klipper3d.org/Command_Templates.html?h=load_fila#delayed-gcodes ###################@
Save Variables to disk¶
If a save_variables config section has been enabled, SAVE_VARIABLE VARIABLE=<name> VALUE=<value> can be used to save the variable to disk so that it can be used across restarts. All stored variables are loaded into the printer.save_variables.variables dict at startup and can be used in gcode macros. to avoid overly long lines you can add the following at the top of the macro:


{% set svv = printer.save_variables.variables %}
As an example, it could be used to save the state of 2-in-1-out hotend and when starting a print ensure that the active extruder is used, instead of T0:
[gcode_macro T0]
gcode:
  RESPOND MSG="YMS INITIALISATION"
  SET_FILAMENT_SENSOR SENSOR=YMS-1 ENABLE=1
  SET_FILAMENT_SENSOR SENSOR=YMS-2 ENABLE=1
  SYNC_EXTRUDER_MOTION EXTRUDER=extruder MOTION_QUEUE=extruder
  SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE=""
  SYNC_EXTRUDER_MOTION EXTRUDER=extruder2 MOTION_QUEUE=""
  M83
  G1 E30 F1000000
  SYNC_EXTRUDER_MOTION EXTRUDER=extruder MOTION_QUEUE=extruder
  SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE=extruder
  SYNC_EXTRUDER_MOTION EXTRUDER=extruder2 MOTION_QUEUE=extruder
  SAVE_VARIABLE VARIABLE=ACTIVE_TOOL VALUE=0
#    SYNC_EXTRUDER_MOTION EXTRUDER=extruder2 MOTION_QUEUE=""
#    SYNC_EXTRUDER_MOTION EXTRUDER=extruder3 MOTION_QUEUE=""
#    SYNC_EXTRUDER_MOTION EXTRUDER=extruder4 MOTION_QUEUE=""
#    SYNC_EXTRUDER_MOTION EXTRUDER=extruder5 MOTION_QUEUE=""
#    SYNC_EXTRUDER_MOTION EXTRUDER=extruder6 MOTION_QUEUE=""
  G1 E-20 F2000
  G1 E20 F2000
  M104 S0
  SAVE_VARIABLE VARIABLE=yms_sensor_initialisation VALUE=True

[gcode_macro T1]
gcode:
  ACTIVATE_EXTRUDER extruder=extruder1
  SAVE_VARIABLE VARIABLE=currentextruder VALUE='"extruder1"'

[gcode_macro T0]
gcode:
  ACTIVATE_EXTRUDER extruder=extruder
  SAVE_VARIABLE VARIABLE=currentextruder VALUE='"extruder"'

[gcode_macro START_GCODE]
gcode:
  {% set svv = printer.save_variables.variables %}
  ACTIVATE_EXTRUDER extruder={svv.currentextruder}
#@@@@@@@@####@@@@@@@##@@@@@@@

[gcode_macro CHECK_YMS1]
gcode:
  QUERY_FILAMENT_SENSOR SENSOR=YMS-1
  RESPOND MSG="{% if printer['filament_motion_sensor YMS-1'].filament_detected %}IN{% else %}OUT{% endif %}"
  RESPOND MSG="{% if printer['filament_motion_sensor YMS-1'].enabled %}enable{% else %}Disable{% endif %}"
  SAVE_VARIABLE VARIABLE=yms1_sensor VALUE="{% if printer['filament_motion_sensor YMS-1'].filament_detected %}True{% else %}False{% endif %}"

[gcode_macro CHECK_YMS2]
gcode:
  QUERY_FILAMENT_SENSOR SENSOR=YMS-2
  RESPOND MSG="{% if printer['filament_motion_sensor YMS-2'].filament_detected %}IN{% else %}OUT{% endif %}"
  RESPOND MSG="{% if printer['filament_motion_sensor YMS-2'].enabled %}enable{% else %}Disable{% endif %}"
  SAVE_VARIABLE VARIABLE=yms2_sensor VALUE="{% if printer['filament_motion_sensor YMS-2'].filament_detected %}True{% else %}False{% endif %}"

[gcode_macro dsfsfsdfsd]
gcode:
  #QUERY_FILAMENT_SENSOR SENSOR=filament_sensor
  RESPOND MSG="{% if printer['filament_switch_sensor filament_sensor'].filament_detected %}IN{% else %}OUT{% endif %}" 

[gcode_macro GPT]
gcode:
  SYNC_EXTRUDER_MOTION EXTRUDER=extruder MOTION_QUEUE=extruder
  SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE=extruder
  SYNC_EXTRUDER_MOTION EXTRUDER=extruder2 MOTION_QUEUE=""
  {% if printer["filament_switch_sensor filament_sensor"].filament_detected %}
    RESPOND MSG="Filament déjà détecté (IN)"
  {% else %}
  RESPOND MSG="Filament non détecté, insertion du filament en cours..."
  {action_respond_info("RUNOUT: Filament runout")}
    {% for i in range(10) %}
    CHECK_FILAMENT_SENSOR
    {% set svv = printer.save_variables.variables %}
    {% if printer.save_variables.variable.filament_sensor %}
    RESPOND MSG="La variable sauvegardée a la valeur True (filament détecté)."
    {% else %}
    PIKA
    RESPOND MSG="La variable sauvegardée a la valeur False (filament non détecté)."
    G1 E10 F300
    CHECK_FILAMENT_SENSOR
    {% endif %}"

    {% endfor %}
  {% endif %}


[gcode_macro PIKA]
gcode:
    {% for i in range(1000) %}
    #CHECK_FILAMENT_SENSOR
    G1 E10 F300
    {% set svv = printer.save_variables.variables %}
    {% set filament_sensor=printer.save_variables.variables.filament_sensor %}
    RESPOND MSG="La valeur actuelle de filament_sensor_value est {filament_sensor}"
    {% endfor %}

M104 S[nozzle_temperature_initial_layer]               ; set extruder temperature and proceed without waiting
M140 S[bed_temperature_initial_layer_single]           ; set bed temperature and proceed without waiting
G28                                                    ; home the printer axes
M190 S[bed_temperature_initial_layer_single]           ; set bed temperature and wait until reached
M109 S[nozzle_temperature_initial_layer]               ; set extruder temperature and wait until reached

MEMO CHATGPT
prompt en fin de discution : 
Can you provide a corrective summary of the new information and corrections learned during our current discussion? 
I need this summary formatted in a code block, and it should include only the things you have learned or were corrected on,
without any additional context or previously known information. 
The summary should be concise and focused solely on the new insights from our conversation.

### Summary of Corrections and Specifics Learned

1. **Syntax for Variables in Klipper Macros**:
   - Variables should be defined using `{% set ... %}`.
   - Example:
     ```ini
     {% set iterations = params.ITERATIONS|default(5)|int %}
     {% set speed = params.SPEED|default(1500)|int %}
     ```

2. **RESPOND MSG Syntax**:
   - Use a single set of braces for variables in messages.
   - Example:
     ```ini
     RESPOND MSG="Starting back and forth movement on the X-axis for {iterations} times at speed {speed} mm/min"
     ```

3. **Use of G4 for Delays**:
   - `G4` is used with the `P` parameter to specify the delay in milliseconds.
   - Example:
     ```gcode
     G4 P5000  # Pause for 5 seconds
     ```

4. **Query Probe in Macros**:
   - Unfortunately, due to the way Jinja is processed, you can’t `QUERY_PROBE` and then check its state in the same macro. The `printer.probe.last_query` reads the value at the start of the macro, before your `QUERY_PROBE` command is executed. This is because all the Jinja expressions are evaluated at the start of the macro, regardless of what G-code might be ahead of them in the actual macro code.
   - Sometimes you can get around this by using a second macro. Try something like this:
